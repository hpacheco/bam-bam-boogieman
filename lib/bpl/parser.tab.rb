# typed: true
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex'
require_relative 'ast/token'
require_relative 'ast/program'
require_relative 'ast/declaration'
require_relative 'ast/specification'
require_relative 'ast/statement'
require_relative 'ast/expression'
require_relative 'ast/type'
include Bpl::AST

class BoogieLanguage < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 353)
def parse(input)
  scan_str(input)
end

def parse_special(str, kind)
  scan_setup("$$PARSE_#{kind.upcase}$$ " + str)
  do_parse
end

def parse_decl(str) parse_special(str, :decl) end
def parse_param(str) parse_special(str, :param) end
def parse_spec(str) parse_special(str, :spec) end
def parse_blocks(str) parse_special(str, :blocks) end
def parse_block(str) parse_special(str, :blocks).first end
def parse_stmt(str) parse_special(str, :stmt) end
def parse_expr(str) parse_special(str, :expr) end
def parse_type(str) parse_special(str, :type) end

def parse_str(str)
  case str
  when /\b(type|const|function|axiom|var|procedure|implementation)\b/
    parse_decl(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;.*\s+#{Bpl::IDENTIFIER}:/m
    parse_blocks(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;/m
    parse_block(str)
  when /\b(assert|assume|havoc|call|if|while|break|goto|return)\b|:=/
    parse_stmt(str)
  when /\b(requires|ensures|modifies|invariant)\b/
    parse_spec(str)
  when /[^<:]:[^:]/
    parse_param(str)
  else
    parse_expr(str)
  end
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    68,   104,   254,    62,  -149,    49,   -39,    79,    63,   335,
   247,    81,  -192,   324,   362,   248,   383,    79,   382,   249,
    77,    64,    29,    35,   334,    69,    76,    55,    59,    58,
    77,   250,    29,   367,  -126,    35,    76,    74,    75,   251,
    60,    61,   159,   252,   255,    65,   135,    74,    75,   135,
    81,   109,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
  -126,    35,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   135,   135,   132,   133,   134,   130,   131,   135,   253,   277,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   135,   141,   243,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   135,   140,    22,
   132,   133,   134,   259,    81,   135,   324,   275,   132,   133,
   134,   130,   131,   129,   122,   123,   124,   125,   126,   127,
   128,   121,   120,   119,   118,   135,   116,   355,   132,   133,
   134,   130,   131,   129,   122,   123,   124,   125,   126,   127,
   128,   121,   120,   119,   118,   135,    29,   263,   132,   133,
   134,   264,   265,   135,   266,   185,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,    29,   235,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,  -105,   145,   146,    68,    79,   271,    62,
    95,    96,    97,   242,    63,    68,   272,   173,    62,   273,
    77,   274,    29,    63,   115,   276,    76,    64,   113,   111,
   385,    69,    55,    55,    59,    58,    64,    74,    75,    55,
    69,    55,    55,    59,    58,    68,    60,    61,    62,   287,
    35,    65,   288,    63,    68,    60,    61,    62,   105,   291,
    65,   292,    63,  -126,  -126,  -126,    64,   293,   102,    55,
    69,    81,    55,    59,    58,    64,   298,    29,   300,    69,
   302,    55,    59,    58,    68,    60,    61,    62,    81,    35,
    65,    -9,    63,    68,    60,    61,    62,    29,    29,    65,
   313,    63,  -126,  -126,  -126,    64,   314,   315,   316,    69,
   317,    55,    59,    58,    64,   320,    94,    29,    69,   329,
    55,    59,    58,    68,    60,    61,    62,    92,    55,    65,
   332,    63,    68,    60,    61,    62,   333,   336,    65,   337,
    63,   338,   135,   339,    64,   132,   133,   134,    69,    91,
    55,    59,    58,    64,    90,    81,   -39,    69,   343,    55,
    59,    58,   226,    60,    61,    81,    68,    79,    65,    62,
    81,   159,    60,    61,    63,    68,   348,    65,    62,    81,
    77,    81,    29,    63,   352,   352,    76,    64,   354,    81,
   357,    69,    26,    55,    59,    58,    64,    74,    75,   359,
    69,   360,    55,    59,    58,    68,    60,    61,    62,   365,
   140,    65,    81,    63,    68,    60,    61,    62,   140,    29,
    65,    35,    63,    29,   378,   379,    64,   380,    55,   186,
    69,   113,    55,    59,    58,    64,   184,    55,    55,    69,
   174,    55,    59,    58,    68,    60,    61,    62,   173,    81,
    65,    81,    63,    68,    60,    61,    62,    81,   135,    65,
   212,    63,    22,    29,    29,    64,    79,    29,    29,    69,
   222,    55,   209,    58,    64,    29,   225,   159,    69,    29,
    55,    59,    58,    68,    60,    61,    62,    29,    79,    65,
   157,    63,    68,    60,    61,    62,   236,    79,    65,    79,
    63,    81,    55,    29,    64,    29,   152,    55,    69,   142,
    55,    59,    58,    64,   246,   nil,   nil,    69,   nil,    55,
    59,    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,
   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,    68,
    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,
    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,    68,
    60,    61,    62,   183,   nil,    65,   nil,    63,    68,    60,
    61,    62,   nil,   nil,    65,   nil,    63,   nil,   nil,   nil,
    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,    64,
   nil,   nil,   nil,    69,   nil,    55,    59,    58,    68,    60,
    61,    62,   nil,   nil,    65,   nil,    63,    68,    60,    61,
    62,   183,   nil,    65,   nil,    63,   nil,   nil,   nil,    64,
   nil,   nil,   nil,    69,   nil,    55,    59,    58,    64,   nil,
   nil,   nil,    69,   nil,    55,    59,    58,    68,    60,    61,
    62,   nil,   nil,    65,   nil,    63,    68,    60,    61,    62,
   nil,   nil,    65,   nil,    63,   nil,   nil,   nil,    64,   nil,
   nil,   nil,    69,   nil,    55,    59,    58,    64,   nil,   nil,
   nil,    69,   nil,    55,    59,    58,    68,    60,    61,    62,
   nil,   nil,    65,   nil,    63,    68,    60,    61,    62,   nil,
   nil,    65,   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,
   nil,    69,   nil,    55,    59,    58,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    68,    60,    61,    62,   nil,
   nil,    65,   nil,    63,    68,    60,    61,    62,   nil,   nil,
    65,   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    68,    60,    61,    62,   nil,   nil,
    65,   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,    68,    60,    61,    62,   183,   nil,    65,   nil,
    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    64,   nil,   nil,   -39,    69,   nil,    55,    59,
    58,   226,    60,    61,   nil,    68,    79,    65,    62,   nil,
   nil,    60,    61,    63,    68,   nil,    65,    62,   183,    77,
   nil,    29,    63,   nil,   nil,    76,    64,   nil,   nil,   nil,
    69,   nil,    55,    59,    58,    64,    74,    75,   nil,    69,
   nil,    55,    59,    58,    68,    60,    61,    62,   nil,   nil,
    65,   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,
   nil,    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    68,    60,    61,    62,   nil,   nil,    65,
   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,
   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    64,   nil,   nil,    49,    69,   nil,    55,    59,    58,
    38,    60,    61,    49,   nil,   nil,    65,   nil,   nil,    38,
    60,    61,   nil,   nil,   nil,    65,     3,     4,     5,     6,
     7,     8,     9,    39,   nil,    40,    41,    43,    45,    46,
    47,    48,    39,   -39,    40,    41,    43,    45,    46,    47,
    48,   nil,   nil,   nil,    79,    18,   nil,   nil,    19,   nil,
   nil,    20,   nil,    21,    22,   nil,    23,    77,   -33,    29,
    24,   nil,   nil,    76,    49,   nil,   nil,   nil,   nil,   nil,
    55,    91,   nil,   135,    74,    75,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,    39,    79,    40,    41,    43,    45,    46,
    47,    48,    49,   nil,   nil,   nil,   nil,    77,    38,    29,
   nil,   245,    49,    76,   nil,   nil,   nil,   nil,    38,   nil,
   nil,    49,   nil,   nil,    74,    75,   nil,    38,   nil,   nil,
   nil,    39,   nil,    40,    41,    43,    45,    46,    47,    48,
   nil,    39,   nil,    40,    41,    43,    45,    46,    47,    48,
    39,    79,    40,    41,    43,    45,    46,    47,    48,    49,
   nil,   nil,   nil,   nil,    77,    38,    29,   nil,    49,    18,
    76,   nil,    19,   nil,    38,    20,   nil,    21,    22,   nil,
    23,    74,    75,   nil,    24,   nil,   nil,   nil,    39,   nil,
    40,    41,    43,    45,    46,    47,    48,    39,    79,    40,
    41,    43,    45,    46,    47,    48,    79,   nil,   nil,   nil,
   nil,    77,   nil,    29,   nil,   nil,   nil,    76,   nil,    77,
    79,    29,   nil,   nil,   nil,    76,   nil,    79,    74,    75,
    79,   nil,   nil,    77,   nil,    29,    74,    75,   nil,    76,
    77,   nil,    29,    77,   nil,    29,    76,   nil,   nil,    76,
    74,    75,    79,   nil,   nil,    79,   nil,    74,    75,   nil,
    74,    75,   nil,   nil,   nil,    77,   nil,    29,    77,  -167,
    29,    76,   135,   nil,    76,   132,   133,   134,   130,   131,
   129,   nil,    74,    75,   135,    74,    75,   132,   133,   134,
   130,   131,   129,   122,   123,   124,   125,   126,   127,   128,
   121,   120,   119,   118,   nil,   nil,   nil,   135,   nil,   260,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   nil,   nil,   nil,
   135,   nil,   218,   132,   133,   134,   130,   131,   129,   122,
   123,   124,   125,   126,   127,   128,   121,   120,   119,   118,
   nil,   nil,   nil,   135,   nil,   358,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   290,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   211,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   321,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   135,   nil,   nil,   132,   133,   134,   130,   131,
   129,   122,   123,   124,   125,   126,   127,   128,   121,   120,
   135,   nil,   nil,   132,   133,   134,   130,   131,   129,   122,
   123,   124,   125,   126,   127,   128,   121,    18,   nil,   nil,
    19,   nil,   nil,    20,   nil,    21,    22,   nil,    23,   nil,
   135,   nil,    24,   132,   133,   134,   130,   131,   129,   122,
   123,   124,   125,   126,   127,   128,   135,   nil,   nil,   132,
   133,   134,   130,   131,   129,   135,   nil,   nil,   132,   133,
   134,   130,   131,   129,   135,   nil,   nil,   132,   133,   134,
   130,   131,   129,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   135,   nil,   nil,   132,   133,   134,   130,   131,
   129,   135,   nil,   nil,   132,   133,   134,   130,   131,   129 ]

racc_action_check = [
    47,    43,   210,    47,   271,   357,   148,    77,    47,   308,
   178,   292,   351,   292,   351,   179,   378,   148,   378,   180,
    77,    47,    77,   351,   308,    47,    77,    47,    47,    47,
   148,   182,   148,   357,   286,   286,   148,    77,    77,   187,
    47,    47,   271,   188,   210,    47,   206,   148,   148,   241,
    43,    47,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   172,
   250,   250,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   203,
   207,   208,   203,   203,   203,   203,   203,   239,   209,   241,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   342,    67,   172,
   342,   342,   342,   342,   342,   342,   342,   342,   342,   342,
   342,   342,   342,   342,   342,   342,   342,   205,    65,   214,
   205,   205,   205,   215,   327,   108,   327,   239,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   161,    52,   342,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   137,   219,   223,   137,   137,
   137,   224,   228,   171,   230,   108,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   384,   232,   161,   384,   384,   384,   384,
   384,   384,   384,   384,   384,   384,   384,   384,   384,   384,
   384,   384,   384,   177,    69,    69,    69,   360,   233,    69,
    36,    36,    36,   171,    69,   124,   234,   177,   124,   237,
   360,   238,   360,   124,    51,   240,   360,    69,    50,    49,
   384,    69,    48,    69,    69,    69,   124,   360,   360,   248,
   124,    46,   124,   124,   124,   383,    69,    69,   383,   251,
   362,    69,   253,   383,     8,   124,   124,     8,    45,   257,
   124,   261,     8,   362,   362,   362,   383,   262,    42,    41,
   383,    40,   383,   383,   383,     8,   267,   268,   269,     8,
   270,     8,     8,     8,   324,   383,   383,   324,    39,   364,
   383,    38,   324,   323,     8,     8,   323,   273,   274,     8,
   279,   323,   364,   364,   364,   324,   281,   282,   284,   324,
   285,   324,   324,   324,   323,   288,    32,   293,   323,   297,
   323,   323,   323,   317,   324,   324,   317,    31,   304,   324,
   305,   317,   154,   323,   323,   154,   307,   310,   323,   312,
   154,   313,   204,   314,   317,   204,   204,   204,   317,    30,
   317,   317,   317,   154,    26,    24,    73,   154,   319,   154,
   154,   154,   154,   317,   317,    23,    86,    73,   317,    86,
    22,   332,   154,   154,    86,   142,   333,   154,   142,    21,
    73,    20,    73,   142,   336,   337,    73,    86,   341,    19,
   343,    86,     1,    86,    86,    86,   142,    73,    73,   345,
   142,   348,   142,   142,   142,   141,    86,    86,   141,   352,
   353,    86,    18,   141,    94,   142,   142,    94,   363,   365,
   142,     5,    94,     4,   370,   376,   141,   377,   115,   110,
   141,   114,   141,   141,   141,    94,   107,   104,   103,    94,
   101,    94,    94,    94,   135,   141,   141,   135,   100,    97,
   141,    96,   135,   134,    94,    94,   134,    95,   136,    94,
   139,   134,   140,    91,    89,   135,   144,    88,    87,   135,
   151,   135,   135,   135,   134,    85,   153,    84,   134,   156,
   134,   134,   134,   133,   135,   135,   133,   158,   160,   135,
    83,   133,    98,   134,   134,    98,   162,   163,   134,   164,
    98,    82,   169,    81,   133,    79,    78,   173,   133,    68,
   133,   133,   133,    98,   176,   nil,   nil,    98,   nil,    98,
    98,    98,    99,   133,   133,    99,   nil,   nil,   133,   nil,
    99,   132,    98,    98,   132,   nil,   nil,    98,   nil,   132,
   nil,   nil,   nil,    99,   nil,   nil,   nil,    99,   nil,    99,
    99,    99,   132,   nil,   nil,   nil,   132,   nil,   132,   132,
   132,   131,    99,    99,   131,   nil,   nil,    99,   nil,   131,
   102,   132,   132,   102,   nil,   nil,   132,   nil,   102,   nil,
   nil,   nil,   131,   nil,   nil,   nil,   131,   nil,   131,   131,
   131,   102,   nil,   nil,   nil,   102,   nil,   102,   102,   102,
   130,   131,   131,   130,   nil,   nil,   131,   nil,   130,   129,
   102,   102,   129,   nil,   nil,   102,   nil,   129,   nil,   nil,
   nil,   130,   nil,   nil,   nil,   130,   nil,   130,   130,   130,
   129,   nil,   nil,   nil,   129,   nil,   129,   129,   129,   105,
   130,   130,   105,   105,   nil,   130,   nil,   105,   128,   129,
   129,   128,   nil,   nil,   129,   nil,   128,   nil,   nil,   nil,
   105,   nil,   nil,   nil,   105,   nil,   105,   105,   105,   128,
   nil,   nil,   nil,   128,   nil,   128,   128,   128,   127,   105,
   105,   127,   nil,   nil,   105,   nil,   127,   111,   128,   128,
   111,   111,   nil,   128,   nil,   111,   nil,   nil,   nil,   127,
   nil,   nil,   nil,   127,   nil,   127,   127,   127,   111,   nil,
   nil,   nil,   111,   nil,   111,   111,   111,   113,   127,   127,
   113,   nil,   nil,   127,   nil,   113,   126,   111,   111,   126,
   nil,   nil,   111,   nil,   126,   nil,   nil,   nil,   113,   nil,
   nil,   nil,   113,   nil,   113,   113,   113,   126,   nil,   nil,
   nil,   126,   nil,   126,   126,   126,   125,   113,   113,   125,
   nil,   nil,   113,   nil,   125,   118,   126,   126,   118,   nil,
   nil,   126,   nil,   118,   nil,   nil,   nil,   125,   nil,   nil,
   nil,   125,   nil,   125,   125,   125,   118,   nil,   nil,   nil,
   118,   nil,   118,   118,   118,   119,   125,   125,   119,   nil,
   nil,   125,   nil,   119,   120,   118,   118,   120,   nil,   nil,
   118,   nil,   120,   nil,   nil,   nil,   119,   nil,   nil,   nil,
   119,   nil,   119,   119,   119,   120,   nil,   nil,   nil,   120,
   nil,   120,   120,   120,   121,   119,   119,   121,   nil,   nil,
   119,   nil,   121,   122,   120,   120,   122,   nil,   nil,   120,
   nil,   122,   nil,   nil,   nil,   121,   nil,   nil,   nil,   121,
   nil,   121,   121,   121,   122,   nil,   nil,   nil,   122,   nil,
   122,   122,   122,   123,   121,   121,   123,   nil,   nil,   121,
   nil,   123,   315,   122,   122,   315,   315,   nil,   122,   nil,
   315,   nil,   nil,   nil,   123,   nil,   nil,   nil,   123,   nil,
   123,   123,   123,   315,   nil,   nil,   nil,   315,   nil,   315,
   315,   315,   290,   123,   123,   290,   nil,   nil,   123,   nil,
   290,   266,   315,   315,   266,   nil,   nil,   315,   nil,   266,
   nil,   nil,   nil,   290,   nil,   nil,   nil,   290,   nil,   290,
   290,   290,   266,   nil,   nil,   149,   266,   nil,   266,   266,
   266,   266,   290,   290,   nil,   255,   149,   290,   255,   nil,
   nil,   266,   266,   255,   249,   nil,   266,   249,   249,   149,
   nil,   149,   249,   nil,   nil,   149,   255,   nil,   nil,   nil,
   255,   nil,   255,   255,   255,   249,   149,   149,   nil,   249,
   nil,   249,   249,   249,   247,   255,   255,   247,   nil,   nil,
   255,   nil,   247,   245,   249,   249,   245,   nil,   nil,   249,
   nil,   245,   nil,   nil,   nil,   247,   nil,   nil,   nil,   247,
   nil,   247,   247,   247,   245,   nil,   nil,   nil,   245,   nil,
   245,   245,   245,    62,   247,   247,    62,   nil,   nil,   247,
   nil,    62,    63,   245,   245,    63,   nil,   nil,   245,   nil,
    63,   nil,   nil,   nil,    62,   nil,   nil,   nil,    62,   nil,
    62,    62,    62,    63,   nil,   nil,   nil,    63,   nil,    63,
    63,    63,    64,    62,    62,    64,   nil,   nil,    62,   nil,
    64,   211,    63,    63,   211,   nil,   nil,    63,   nil,   211,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    64,   nil,    64,
    64,    64,   211,   nil,   nil,   nil,   211,   nil,   211,   211,
   211,   170,    64,    64,   170,   nil,   nil,    64,   nil,   170,
   168,   211,   211,   168,   nil,   nil,   211,   nil,   168,   nil,
   nil,   nil,   170,   nil,   nil,   nil,   170,   nil,   170,   170,
   170,   168,   nil,   nil,   316,   168,   nil,   168,   168,   168,
   316,   170,   170,   287,   nil,   nil,   170,   nil,   nil,   287,
   168,   168,   nil,   nil,   nil,   168,     0,     0,     0,     0,
     0,     0,     0,   316,   nil,   316,   316,   316,   316,   316,
   316,   316,   287,   369,   287,   287,   287,   287,   287,   287,
   287,   nil,   nil,   nil,   369,     0,   nil,   nil,     0,   nil,
   nil,     0,   nil,     0,     0,   nil,     0,   369,   369,   369,
     0,   nil,   nil,   369,     7,   nil,   nil,   nil,   nil,   nil,
     7,   369,   nil,   175,   369,   369,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,     7,   263,     7,     7,     7,     7,     7,
     7,     7,     6,   nil,   nil,   nil,   nil,   263,     6,   263,
   nil,   175,   116,   263,   nil,   nil,   nil,   nil,   116,   nil,
   nil,   367,   nil,   nil,   263,   263,   nil,   367,   nil,   nil,
   nil,     6,   nil,     6,     6,     6,     6,     6,     6,     6,
   nil,   116,   nil,   116,   116,   116,   116,   116,   116,   116,
   367,   298,   367,   367,   367,   367,   367,   367,   367,    53,
   nil,   nil,   nil,   nil,   298,    53,   298,   nil,   213,     3,
   298,   nil,     3,   nil,   213,     3,   nil,     3,     3,   nil,
     3,   298,   298,   nil,     3,   nil,   nil,   nil,    53,   nil,
    53,    53,    53,    53,    53,    53,    53,   213,     9,   213,
   213,   213,   213,   213,   213,   213,   264,   nil,   nil,   nil,
   nil,     9,   nil,     9,   nil,   nil,   nil,     9,   nil,   264,
   152,   264,   nil,   nil,   nil,   264,   nil,    92,     9,     9,
   334,   nil,   nil,   152,   nil,   152,   264,   264,   nil,   152,
    92,   nil,    92,   334,   nil,   334,    92,   nil,   nil,   334,
   152,   152,   335,   nil,   nil,   272,   nil,    92,    92,   nil,
   334,   334,   nil,   nil,   nil,   335,   nil,   335,   272,   272,
   272,   335,   201,   nil,   272,   201,   201,   201,   201,   201,
   201,   nil,   335,   335,   217,   272,   272,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   nil,   nil,   nil,   143,   nil,   217,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   nil,   nil,   nil,
   344,   nil,   143,   344,   344,   344,   344,   344,   344,   344,
   344,   344,   344,   344,   344,   344,   344,   344,   344,   344,
   nil,   nil,   nil,   256,   nil,   344,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   138,   nil,   256,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   322,   138,   nil,   322,   322,   322,   322,
   322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
   322,   322,   322,   181,   nil,   nil,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   289,   289,   nil,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   289,   289,   289,   167,   nil,   nil,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,    56,   nil,   nil,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,   227,   nil,   nil,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   192,   nil,   nil,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   nil,   nil,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   194,   nil,   nil,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,    17,   nil,   nil,
    17,   nil,   nil,    17,   nil,    17,    17,   nil,    17,   nil,
   195,   nil,    17,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   202,   nil,   nil,   202,
   202,   202,   202,   202,   202,   196,   nil,   nil,   196,   196,
   196,   196,   196,   196,   197,   nil,   nil,   197,   197,   197,
   197,   197,   197,   198,   nil,   nil,   198,   198,   198,   198,
   198,   198,   199,   nil,   nil,   199,   199,   199,   199,   199,
   199,   200,   nil,   nil,   200,   200,   200,   200,   200,   200 ]

racc_action_pointer = [
  1160,   422,   nil,  1284,   422,   387,  1257,  1219,   280,  1362,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1682,   391,   368,
   360,   358,   349,   344,   334,   nil,   384,   nil,   nil,   nil,
   336,   329,   271,   nil,   nil,   nil,   163,   nil,   293,   267,
   250,   268,   250,    -1,   nil,   259,   240,    -4,   231,   230,
   253,   211,   138,  1314,   nil,   nil,  1648,   nil,   nil,   nil,
   nil,   nil,  1059,  1068,  1098,    85,   nil,    89,   510,   232,
   nil,   nil,   nil,   381,   nil,   nil,   nil,    -9,   531,   504,
   nil,   502,   480,   454,   438,   474,   392,   467,   466,   463,
   nil,   462,  1391,   nil,   440,   436,   430,   428,   518,   548,
   435,   415,   596,   437,   436,   665,   nil,   411,   140,   nil,
   404,   713,   nil,   743,   456,   427,  1267,   nil,   791,   821,
   830,   860,   869,   899,   241,   782,   752,   704,   674,   635,
   626,   587,   557,   509,   479,   470,   483,   180,  1548,   441,
   418,   431,   401,  1482,   480,   nil,   nil,   nil,     1,   970,
   nil,   470,  1384,   489,   358,   nil,   478,   nil,   486,   nil,
   502,   160,   471,   511,   513,   nil,   nil,  1628,  1146,   501,
  1137,   188,    64,   506,   nil,  1248,   489,   204,   -19,   -33,
   -10,  1588,     1,   nil,   nil,   nil,   nil,     9,    37,   nil,
   nil,   nil,  1688,  1707,  1725,  1755,  1780,  1789,  1798,  1807,
  1816,  1447,  1771,    84,   367,   132,    41,    85,    86,    70,
    -4,  1107,   nil,  1323,    65,   113,   nil,  1459,   nil,   155,
   nil,   nil,   nil,   181,   148,   nil,   nil,  1668,   140,   nil,
   151,   nil,   183,   218,   217,   nil,   nil,   220,   222,    92,
   200,    44,   nil,   nil,   nil,  1029,   nil,  1020,   238,   990,
     7,   226,   nil,   250,   nil,   981,  1528,   237,   nil,   nil,
   nil,   241,   254,  1258,  1370,   nil,   947,   239,   276,   253,
   240,   -27,  1419,   296,   297,   nil,   nil,   nil,   nil,   300,
   nil,   306,   294,   nil,   285,   277,   -29,  1158,   339,  1608,
   938,   nil,   -40,   316,   nil,   nil,   nil,   294,  1315,   nil,
   nil,   nil,   nil,   nil,   327,   317,   nil,   336,   -19,   nil,
   337,   nil,   339,   316,   318,   908,  1149,   349,   nil,   336,
   nil,   nil,  1568,   319,   310,   nil,   nil,    93,   nil,   nil,
   nil,   nil,   332,   334,  1394,  1416,   342,   343,   nil,   nil,
   nil,   366,   112,   393,  1505,   377,   nil,   nil,   402,   nil,
   nil,   -41,   410,   387,   nil,   nil,   nil,   -20,   nil,   nil,
   221,   nil,   216,   395,   255,   418,   nil,  1276,   nil,  1208,
   424,   nil,   nil,   nil,   nil,   nil,   425,   405,   -37,   nil,
   nil,   nil,   nil,   271,   208,   nil ]

racc_action_default = [
  -139,  -196,    -1,  -196,  -196,  -126,  -128,  -196,  -196,   -39,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,  -195,  -196,    -2,    -3,    -9,
   -10,  -196,  -177,  -184,    -4,  -127,  -196,    -5,   -12,   -78,
   -78,  -196,  -196,   -78,   -97,  -196,   -13,  -196,  -196,  -196,
  -115,  -112,  -196,  -128,    -6,   -12,    -7,   -19,   -20,   -21,
   -22,   -23,  -196,  -196,  -196,  -196,   -65,   -67,  -196,  -196,
    -8,   -25,   -26,   -33,   -28,   -29,   -30,   -39,  -196,  -196,
  -140,  -196,   -78,  -142,  -149,  -196,  -196,  -196,  -196,  -196,
   386,  -196,   -39,  -174,  -196,   -78,   -78,   -78,  -196,  -196,
   -15,  -196,  -196,  -196,  -196,  -196,   -14,  -196,  -196,  -100,
  -196,  -196,  -111,  -196,  -115,  -196,  -128,  -130,  -196,  -196,
  -196,  -196,  -196,  -196,  -196,  -196,  -196,  -196,  -196,  -196,
  -196,  -196,  -196,  -196,  -196,  -196,   -58,   -59,  -196,  -196,
  -175,   -73,  -196,  -196,   -39,   -75,   -76,   -27,   -33,   -33,
   -36,  -196,   -39,  -196,   -89,   -79,  -196,  -143,  -196,  -150,
   -39,  -196,  -196,   -39,   -39,   -11,  -173,  -178,  -196,  -196,
  -196,  -196,  -196,  -196,   -93,   -71,  -196,   -15,  -196,  -196,
  -196,  -117,  -196,  -118,   -99,  -101,  -102,  -196,  -196,  -116,
  -113,  -129,   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,
   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -21,
  -196,  -196,   -64,  -128,  -175,  -196,   -74,  -196,   -70,  -196,
   -34,   -35,   -31,  -196,   -37,   -40,   -24,   -85,  -196,   -86,
   -87,   -90,  -144,  -152,  -196,  -171,  -172,  -196,  -196,  -196,
  -196,  -196,   -91,   -92,   -16,  -196,   -94,   -73,  -196,  -121,
  -124,  -196,  -114,  -196,   -60,  -196,  -196,  -196,  -176,   -66,
   -68,  -196,  -185,   -39,   -39,   -77,  -196,  -146,  -144,  -196,
  -159,  -157,   -39,  -187,  -187,  -189,  -190,  -191,   -72,  -196,
  -106,  -196,  -119,  -122,  -196,  -196,  -124,  -128,  -196,  -196,
  -196,  -131,   -83,  -196,   -32,   -38,   -88,  -196,   -39,  -145,
  -148,  -151,  -160,  -153,  -196,  -155,  -158,  -196,  -164,  -168,
  -196,  -188,  -196,  -196,  -196,  -196,  -128,  -196,  -125,  -196,
   -62,   -61,   -63,  -196,  -196,   -81,   -82,   -83,  -186,  -141,
  -147,  -154,  -149,  -196,   -39,   -39,  -180,  -180,   -95,   -96,
  -120,  -196,  -196,  -108,  -196,  -196,   -84,  -156,  -196,  -165,
  -166,  -126,  -196,  -196,   -98,  -123,  -107,  -196,   -69,   -80,
   -39,  -179,  -192,  -196,  -192,  -187,  -194,  -128,  -110,   -10,
  -196,  -162,  -163,  -182,  -183,  -193,  -196,  -196,  -196,  -181,
  -109,  -161,  -169,  -196,  -196,  -170 ]

racc_goto_table = [
    56,   139,   215,   214,   176,   150,    70,   148,   233,   310,
   312,   101,   112,   261,   213,   188,   231,    37,   110,   223,
   144,   267,   309,    25,   284,   219,   283,   285,   182,   107,
   153,   323,   325,   306,   187,   363,   156,   210,    54,   108,
    80,   234,   165,   297,   237,   238,   373,   228,   375,   220,
   221,   351,   353,    34,   136,   137,   138,   299,    50,    50,
   318,   143,    52,   285,   117,    73,   346,   325,   269,   270,
   301,   303,    28,   179,   151,   307,   189,   214,   161,   370,
   150,   150,   148,   148,   349,   350,   167,   328,   258,   166,
   171,   172,   340,   100,   347,   381,    27,   181,   106,   162,
   100,   376,    93,   181,     2,    50,   361,   158,   279,    52,
   192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   191,   296,   149,
   190,   295,   178,    73,   217,   281,   368,   154,     1,   240,
   356,   160,   nil,   244,   163,   164,   227,   278,    73,   224,
   nil,   nil,   nil,   nil,   nil,   177,   180,   nil,   nil,   nil,
   239,   nil,   241,   nil,   nil,   nil,   nil,    50,    50,   nil,
   nil,   nil,    52,    83,    84,    85,    86,    87,    88,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    98,    99,   nil,   nil,   103,   nil,
   nil,   nil,   nil,   256,   149,   149,   nil,   nil,    73,   nil,
   371,   nil,   232,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   100,   nil,   nil,   257,   100,   345,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   155,   nil,   nil,
   nil,   181,   nil,   nil,   nil,   nil,   nil,   289,   nil,   nil,
   168,   169,   170,   nil,   nil,   nil,   nil,   nil,   227,   nil,
   294,   224,   nil,   nil,   nil,    50,   nil,   nil,   nil,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   322,   nil,   nil,   nil,   nil,   nil,   268,   366,
   nil,   nil,   nil,   nil,   nil,   330,   nil,   nil,   319,   374,
   280,   150,   nil,   148,   nil,   nil,   nil,   181,   nil,   342,
   nil,   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,    73,
    73,   nil,   nil,   nil,   268,   nil,   nil,   341,    73,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    73,   nil,   331,   372,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,   nil,    52,   nil,   nil,   384,   nil,   nil,   377,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    73,    73,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   369,   nil,   nil,    50,
   nil,   nil,   nil,    52,   nil,   149 ]

racc_goto_check = [
     8,    25,    26,    56,    24,    20,     9,    19,    64,    77,
    77,    14,    46,    28,    51,    24,    36,     6,    14,    23,
    27,    61,    74,    59,    42,    22,    48,    50,    41,    13,
    11,    29,    30,    70,    41,    80,    60,    24,     7,     8,
    59,    22,    11,    62,    22,    22,    80,    31,    80,    21,
    21,    78,    78,     5,     8,     8,     8,    61,    12,    12,
    42,     8,    10,    50,     6,    10,    29,    30,    65,    66,
    67,    68,     4,    14,     9,    71,    46,    56,     8,    72,
    20,    20,    19,    19,    74,    74,     8,    28,    51,     9,
     8,     8,    48,    12,    70,    73,     3,     8,    12,    75,
    12,    77,    76,     8,     2,    12,    79,    63,    26,    10,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     6,    36,    10,
    37,    23,    38,    10,     8,    39,    40,    10,     1,    14,
    44,    10,   nil,    14,    10,    10,     8,    24,    10,     9,
   nil,   nil,   nil,   nil,   nil,    12,    12,   nil,   nil,   nil,
     8,   nil,     8,   nil,   nil,   nil,   nil,    12,    12,   nil,
   nil,   nil,    10,    32,    32,    32,    32,    32,    32,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,    32,   nil,   nil,    32,   nil,
   nil,   nil,   nil,     8,    10,    10,   nil,   nil,    10,   nil,
    64,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,     6,    12,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,
    32,    32,    32,   nil,   nil,   nil,   nil,   nil,     8,   nil,
     9,     9,   nil,   nil,   nil,    12,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,    10,    25,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,     6,    25,
    12,    20,   nil,    19,   nil,   nil,   nil,     8,   nil,     8,
   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,    10,
    10,   nil,   nil,   nil,    10,   nil,   nil,     6,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,    12,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,    10,   nil,   nil,     8,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    12,
   nil,   nil,   nil,    10,   nil,    10 ]

racc_goto_pointer = [
   nil,   138,   104,    93,    68,    48,    11,    31,    -8,    -3,
    56,   -49,    52,   -17,   -30,   nil,   nil,   nil,   nil,   -66,
   -68,   -99,  -119,  -133,   -98,   -64,  -139,   -49,  -206,  -261,
  -260,  -107,   155,   nil,   nil,   nil,  -138,    15,    29,  -114,
  -221,   -77,  -226,   nil,  -203,   nil,   -38,   nil,  -223,   nil,
  -223,  -126,   nil,   nil,   nil,   nil,  -137,   nil,   nil,    23,
   -47,  -211,  -224,    23,  -150,  -165,  -164,  -200,  -200,   nil,
  -238,  -197,  -281,  -283,  -250,    12,    70,  -264,  -285,  -245,
  -316 ]

racc_goto_default = [
   nil,   nil,   nil,    17,   262,   364,   nil,    53,   175,   308,
    30,    31,    67,   nil,   nil,   nil,    66,    57,   229,    71,
    72,   147,    78,   nil,   216,   nil,   nil,   nil,   311,   nil,
    82,   nil,   nil,   326,   327,   230,   nil,    42,   nil,   nil,
    44,   282,   nil,   nil,   nil,    51,   nil,   114,   nil,   286,
    36,   nil,    10,    11,    12,    13,    14,    15,    16,   nil,
   nil,   nil,   nil,   304,    32,   nil,   nil,   nil,   nil,   305,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_none,
  2, 82, :_reduce_2,
  2, 82, :_reduce_3,
  2, 82, :_reduce_4,
  2, 82, :_reduce_5,
  2, 82, :_reduce_6,
  2, 82, :_reduce_7,
  2, 82, :_reduce_8,
  1, 91, :_reduce_9,
  1, 92, :_reduce_10,
  3, 92, :_reduce_11,
  1, 93, :_reduce_12,
  0, 94, :_reduce_13,
  1, 94, :_reduce_none,
  1, 95, :_reduce_15,
  3, 95, :_reduce_16,
  0, 96, :_reduce_17,
  1, 96, :_reduce_none,
  1, 97, :_reduce_19,
  1, 97, :_reduce_20,
  1, 97, :_reduce_21,
  1, 98, :_reduce_22,
  1, 98, :_reduce_23,
  1, 99, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  2, 90, :_reduce_27,
  1, 100, :_reduce_28,
  1, 100, :_reduce_29,
  1, 100, :_reduce_30,
  3, 100, :_reduce_31,
  5, 101, :_reduce_32,
  0, 102, :_reduce_33,
  2, 102, :_reduce_34,
  2, 102, :_reduce_35,
  1, 102, :_reduce_36,
  1, 104, :_reduce_37,
  3, 104, :_reduce_38,
  0, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 89, :_reduce_41,
  3, 89, :_reduce_42,
  3, 89, :_reduce_43,
  3, 89, :_reduce_44,
  3, 89, :_reduce_45,
  3, 89, :_reduce_46,
  3, 89, :_reduce_47,
  3, 89, :_reduce_48,
  3, 89, :_reduce_49,
  3, 89, :_reduce_50,
  3, 89, :_reduce_51,
  3, 89, :_reduce_52,
  3, 89, :_reduce_53,
  3, 89, :_reduce_54,
  3, 89, :_reduce_55,
  3, 89, :_reduce_56,
  3, 89, :_reduce_57,
  2, 89, :_reduce_58,
  2, 89, :_reduce_59,
  4, 89, :_reduce_60,
  6, 89, :_reduce_61,
  6, 89, :_reduce_62,
  6, 89, :_reduce_63,
  3, 89, :_reduce_64,
  1, 89, :_reduce_none,
  4, 89, :_reduce_66,
  1, 89, :_reduce_67,
  4, 89, :_reduce_68,
  8, 89, :_reduce_69,
  3, 89, :_reduce_70,
  1, 105, :_reduce_71,
  3, 105, :_reduce_72,
  0, 107, :_reduce_73,
  1, 107, :_reduce_none,
  1, 108, :_reduce_75,
  1, 108, :_reduce_76,
  4, 111, :_reduce_77,
  0, 113, :_reduce_78,
  2, 113, :_reduce_79,
  3, 114, :_reduce_80,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  0, 110, :_reduce_83,
  2, 110, :_reduce_84,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 117, :_reduce_87,
  3, 117, :_reduce_88,
  0, 112, :_reduce_89,
  1, 112, :_reduce_none,
  4, 88, :_reduce_91,
  4, 88, :_reduce_92,
  3, 88, :_reduce_93,
  4, 88, :_reduce_94,
  7, 88, :_reduce_95,
  7, 88, :_reduce_96,
  1, 88, :_reduce_none,
  8, 88, :_reduce_98,
  3, 88, :_reduce_99,
  2, 88, :_reduce_100,
  3, 88, :_reduce_101,
  3, 88, :_reduce_102,
  1, 124, :_reduce_103,
  2, 124, :_reduce_104,
  1, 119, :_reduce_105,
  3, 119, :_reduce_106,
  8, 121, :_reduce_107,
  0, 125, :_reduce_108,
  4, 125, :_reduce_109,
  2, 125, :_reduce_110,
  2, 126, :_reduce_111,
  1, 118, :_reduce_112,
  3, 118, :_reduce_113,
  3, 128, :_reduce_114,
  0, 127, :_reduce_115,
  2, 127, :_reduce_116,
  1, 122, :_reduce_none,
  1, 122, :_reduce_118,
  1, 129, :_reduce_119,
  3, 129, :_reduce_120,
  0, 120, :_reduce_121,
  1, 120, :_reduce_none,
  4, 130, :_reduce_123,
  0, 123, :_reduce_124,
  2, 123, :_reduce_125,
  0, 131, :_reduce_126,
  1, 131, :_reduce_127,
  0, 87, :_reduce_128,
  3, 87, :_reduce_129,
  2, 87, :_reduce_130,
  4, 106, :_reduce_131,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 140, :_reduce_139,
  2, 140, :_reduce_140,
  7, 133, :_reduce_141,
  0, 141, :_reduce_142,
  1, 141, :_reduce_143,
  0, 142, :_reduce_144,
  2, 142, :_reduce_145,
  0, 143, :_reduce_146,
  2, 143, :_reduce_147,
  6, 134, :_reduce_148,
  0, 144, :_reduce_149,
  1, 144, :_reduce_150,
  2, 146, :_reduce_151,
  0, 147, :_reduce_152,
  2, 147, :_reduce_153,
  2, 150, :_reduce_154,
  1, 151, :_reduce_155,
  3, 151, :_reduce_156,
  0, 149, :_reduce_157,
  1, 149, :_reduce_none,
  0, 148, :_reduce_159,
  1, 148, :_reduce_160,
  12, 135, :_reduce_161,
  1, 153, :_reduce_162,
  1, 153, :_reduce_163,
  1, 155, :_reduce_164,
  3, 155, :_reduce_165,
  3, 155, :_reduce_166,
  0, 152, :_reduce_167,
  1, 152, :_reduce_168,
  1, 154, :_reduce_169,
  3, 154, :_reduce_170,
  4, 136, :_reduce_171,
  4, 137, :_reduce_172,
  3, 145, :_reduce_173,
  2, 156, :_reduce_174,
  0, 132, :_reduce_175,
  2, 132, :_reduce_176,
  0, 157, :_reduce_177,
  2, 157, :_reduce_178,
  9, 138, :_reduce_179,
  0, 159, :_reduce_180,
  4, 159, :_reduce_181,
  2, 160, :_reduce_182,
  2, 160, :_reduce_183,
  1, 85, :_reduce_184,
  1, 109, :_reduce_185,
  3, 109, :_reduce_186,
  0, 158, :_reduce_187,
  1, 158, :_reduce_none,
  5, 86, :_reduce_189,
  5, 86, :_reduce_190,
  5, 86, :_reduce_191,
  0, 161, :_reduce_192,
  2, 161, :_reduce_193,
  9, 139, :_reduce_194,
  1, 83, :_reduce_195 ]

racc_reduce_n = 196

racc_shift_n = 386

racc_token_table = {
  false => 0,
  :error => 1,
  "forall" => 2,
  "exists" => 3,
  "old" => 4,
  "[" => 5,
  "]" => 6,
  "!" => 7,
  "*" => 8,
  "/" => 9,
  "%" => 10,
  "+" => 11,
  "-" => 12,
  "++" => 13,
  "==" => 14,
  "!=" => 15,
  "<" => 16,
  ">" => 17,
  "<=" => 18,
  ">=" => 19,
  "<:" => 20,
  "&&" => 21,
  "||" => 22,
  "==>" => 23,
  "<==>" => 24,
  "if" => 25,
  "then" => 26,
  "else" => 27,
  ":" => 28,
  "(" => 29,
  ")" => 30,
  :IDENTIFIER => 31,
  :NUMBER => 32,
  :BITVECTOR => 33,
  :STRING => 34,
  :BVTYPE => 35,
  :PARSE_DECL => 36,
  :PARSE_PARAM => 37,
  :PARSE_SPEC => 38,
  :PARSE_BLOCKS => 39,
  :PARSE_STMT => 40,
  :PARSE_EXPR => 41,
  :PARSE_TYPE => 42,
  "," => 43,
  "true" => 44,
  "false" => 45,
  "bool" => 46,
  "int" => 47,
  ":=" => 48,
  "|" => 49,
  "::" => 50,
  "{:" => 51,
  "}" => 52,
  "{" => 53,
  "assert" => 54,
  ";" => 55,
  "assume" => 56,
  "havoc" => 57,
  "call" => 58,
  "while" => 59,
  "break" => 60,
  "return" => 61,
  "goto" => 62,
  "invariant" => 63,
  "free" => 64,
  "type" => 65,
  "finite" => 66,
  "=" => 67,
  "const" => 68,
  "unique" => 69,
  "complete" => 70,
  "function" => 71,
  "returns" => 72,
  "axiom" => 73,
  "var" => 74,
  "where" => 75,
  "procedure" => 76,
  "requires" => 77,
  "modifies" => 78,
  "ensures" => 79,
  "implementation" => 80 }

racc_nt_base = 81

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"forall\"",
  "\"exists\"",
  "\"old\"",
  "\"[\"",
  "\"]\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"++\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<:\"",
  "\"&&\"",
  "\"||\"",
  "\"==>\"",
  "\"<==>\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "IDENTIFIER",
  "NUMBER",
  "BITVECTOR",
  "STRING",
  "BVTYPE",
  "PARSE_DECL",
  "PARSE_PARAM",
  "PARSE_SPEC",
  "PARSE_BLOCKS",
  "PARSE_STMT",
  "PARSE_EXPR",
  "PARSE_TYPE",
  "\",\"",
  "\"true\"",
  "\"false\"",
  "\"bool\"",
  "\"int\"",
  "\":=\"",
  "\"|\"",
  "\"::\"",
  "\"{:\"",
  "\"}\"",
  "\"{\"",
  "\"assert\"",
  "\";\"",
  "\"assume\"",
  "\"havoc\"",
  "\"call\"",
  "\"while\"",
  "\"break\"",
  "\"return\"",
  "\"goto\"",
  "\"invariant\"",
  "\"free\"",
  "\"type\"",
  "\"finite\"",
  "\"=\"",
  "\"const\"",
  "\"unique\"",
  "\"complete\"",
  "\"function\"",
  "\"returns\"",
  "\"axiom\"",
  "\"var\"",
  "\"where\"",
  "\"procedure\"",
  "\"requires\"",
  "\"modifies\"",
  "\"ensures\"",
  "\"implementation\"",
  "$start",
  "target",
  "program",
  "decl",
  "param_decl",
  "spec",
  "blocks",
  "stmt",
  "expr",
  "type",
  "name",
  "names",
  "ident",
  "ident_opt",
  "idents",
  "idents_opt",
  "literal",
  "bool_lit",
  "string",
  "type_atom",
  "map_type",
  "tc_args",
  "type_args",
  "types",
  "exprs",
  "body",
  "exprs_opt",
  "quantifier",
  "param_decls",
  "ants",
  "attr",
  "enss_opt",
  "attrs",
  "trigger",
  "ant",
  "ens",
  "enss",
  "lhss",
  "call_lhs",
  "wc_exprs_opt",
  "if_stmt",
  "wc_expr",
  "loop_invs",
  "stmts",
  "else_stmt",
  "lhs",
  "selects",
  "select",
  "wc_exprs",
  "loop_inv",
  "free_opt",
  "var_decls",
  "type_decl",
  "const_decl",
  "func_decl",
  "axiom_decl",
  "var_decl",
  "proc_decl",
  "impl_decl",
  "decls",
  "finite_opt",
  "tc_params",
  "type_syn",
  "unique_opt",
  "typed_ids",
  "order_spec",
  "parent_info",
  "complete_opt",
  "parent_edges_opt",
  "parent_edge",
  "parent_edges",
  "fargs_opt",
  "farg",
  "fbody",
  "fargs",
  "typed_ids_where",
  "where_clause",
  "param_decls_opt",
  "out_params",
  "pspec",
  "specs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_2(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_3(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_4(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_8(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_10(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_11(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_12(val, _values)
     {name: val[0]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_13(val, _values)
     nil 
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_15(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_16(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_17(val, _values)
     [] 
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values)
     BooleanLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_20(val, _values)
     BitvectorLiteral.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values)
     IntegerLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_22(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_23(val, _values)
     false 
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_27(val, _values)
     CustomType.new name: val[0], arguments: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_28(val, _values)
     Type::Boolean 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_29(val, _values)
     Type::Integer 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_30(val, _values)
     BitvectorType.new width: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_31(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_32(val, _values)
        MapType.new arguments: val[0], domain: val[2], range: val[4]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_33(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_34(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_35(val, _values)
     [(CustomType.new name: val[0], arguments: val[1])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_36(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_37(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_38(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_39(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_40(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_41(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_42(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_43(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_44(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_45(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_46(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_47(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_48(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_49(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_50(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_51(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_52(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_53(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_54(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_55(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_56(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_57(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_58(val, _values)
     LogicalNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_59(val, _values)
     ArithmeticNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_60(val, _values)
     MapSelect.new map: val[0], indexes: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_61(val, _values)
     MapUpdate.new map: val[0], indexes: val[2], value: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_62(val, _values)
     BitvectorExtract.new bitvector: val[0], msb: val[2], lsb: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_63(val, _values)
            IfExpression.new condition: val[1], then: val[3], else: val[5]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_64(val, _values)
     CodeExpression.new body: val[1] 
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_66(val, _values)
            id = FunctionIdentifier.new val[0]
        FunctionApplication.new function: id, arguments: val[2]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_67(val, _values)
     StorageIdentifier.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_68(val, _values)
     OldExpression.new expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_69(val, _values)
            QuantifiedExpression.new quantifier: val[1], type_arguments: val[2],
          variables: val[3],
          attributes: val[5].select{|a| a.is_a?(Hash)},
          triggers: val[5].select{|es| es.is_a?(Array)}.map{|es| Trigger.new(expressions: es)},
          expression: val[6]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_70(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_71(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_72(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_73(val, _values)
     [] 
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_75(val, _values)
    'forall'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_76(val, _values)
    'exists'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_77(val, _values)
     Attribute.new key: val[1].to_sym, values: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_78(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_79(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_80(val, _values)
     val[1] 
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_83(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_84(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_87(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_88(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_89(val, _values)
     [] 
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_91(val, _values)
     AssertStatement.new attributes: val[1], expression: val[2], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_92(val, _values)
     AssumeStatement.new attributes: val[1], expression: val[2], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_93(val, _values)
          ids = val[1].map{|id| StorageIdentifier.new id}
      HavocStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_94(val, _values)
     AssignStatement.new lhs: val[0], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_95(val, _values)
          CallStatement.new attributes: val[1], assignments: val[2][:rets],
      procedure: val[2][:name], arguments: val[4], token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_96(val, _values)
          id = ProcedureIdentifier.new val[2]
      CallStatement.new assignments: nil, procedure: id, arguments: val[4],
      token: val[0]
    
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_98(val, _values)
          WhileStatement.new condition: val[2], invariants: val[4], blocks: val[6],
      token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_99(val, _values)
          id = LabelIdentifier.new(val[1]) if val[1]
      BreakStatement.new identifier: id, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_100(val, _values)
     ReturnStatement.new token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_101(val, _values)
     ReturnStatement.new expression: val[1], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_102(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      GotoStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_103(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_104(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_105(val, _values)
     {name: ProcedureIdentifier.new(val[0]), rets: []} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_106(val, _values)
          ids = val[0].map{|id| StorageIdentifier.new id}
      id = ProcedureIdentifier.new val[2]
      {name: id, rets: ids}
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_107(val, _values)
     IfStatement.new condition: val[2], blocks: val[5], else: val[7], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_108(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_109(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_110(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_111(val, _values)
        id = StorageIdentifier.new val[0]
    val[1].reduce(id){|m,x| MapSelect.new map: m, indexes: x}
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_112(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_113(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_114(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_115(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_116(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_118(val, _values)
     Expression::Wildcard 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_119(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_120(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_121(val, _values)
     [] 
  end
.,.,

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_123(val, _values)
     LoopInvariant.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_124(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_125(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_126(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_127(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_128(val, _values)
     [Block.new(names: [], statements: [])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_129(val, _values)
          bs = val[2]
      bs.first.prepend_children(:names,val[0])
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_130(val, _values)
          bs = val[1]
      bs.unshift(Block.new(names: [], statements: [])) unless bs.first.names.empty?
      bs.first.prepend_children(:statements,val[0])
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_131(val, _values)
     Body.new locals: val[1], blocks: val[2] 
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_139(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_140(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_141(val, _values)
        if val[5] && val[2]
      abort "Illegal declaration of type #{([val[3]] + val[4]) * " "}"
    end
    TypeDeclaration.new attributes: val[1], finite: val[2], name: val[3],
      arguments: val[4], type: val[5]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_142(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_143(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_144(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_145(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_146(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_147(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_148(val, _values)
        ConstantDeclaration.new(val[3].merge({attributes: val[1], unique: val[2], order_spec: val[4]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_149(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_150(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_151(val, _values)
     [val[0],val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_152(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_153(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_154(val, _values)
        id = StorageIdentifier.new val[1]
    [val[0],id]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_155(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_156(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_157(val, _values)
     [] 
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_159(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_160(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_161(val, _values)
        FunctionDeclaration.new attributes: val[1], name: val[2],
      type_arguments: val[3], arguments: val[5], return: val[9], body: val[11]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_162(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_163(val, _values)
     StorageDeclaration.new(names: [], type: val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_164(val, _values)
     [{names: [], type: val[0]}] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_165(val, _values)
          if val[2].first[:names].empty?
        [{names: [], type: val[0]}] + val[2]
      else
        val[2].first[:names].unshift(val[0])
        val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_166(val, _values)
          # assert val[2].first[:names].empty?

      unless val[0].respond_to?(:name)
        raise ParseError, "parse error on value #{val[0]}: expecting name."
      end

      if val[2].first[:names].empty?
        val[2].first[:names].unshift(val[0])
        val[2]
      else
        [{names: [val[0]], type: val[2].first[:names].shift}] + val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_167(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_168(val, _values)
          val[0].map do |x|
        x[:names].map!{|t| t.name}
        StorageDeclaration.new(x)
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_169(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_170(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_171(val, _values)
        AxiomDeclaration.new attributes: val[1], expression: val[2]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_172(val, _values)
        VariableDeclaration.new(val[2].merge({attributes: val[1]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_173(val, _values)
     {names: val[0], type: val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_174(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_175(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_176(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_177(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_178(val, _values)
     {where: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_179(val, _values)
          ProcedureDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: val[8][:specs], body: val[8][:body]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_180(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_181(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_182(val, _values)
     {specs: val[1], body: nil} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_183(val, _values)
     {specs: val[0], body: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_184(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_185(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_186(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_187(val, _values)
     [] 
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_189(val, _values)
          RequiresClause.new free: val[0], attributes: val[2], expression: val[3]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_190(val, _values)
          ids = val[3].map{|id| StorageIdentifier.new id}
      ModifiesClause.new free: val[0], attributes: val[2], identifiers: ids
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_191(val, _values)
          EnsuresClause.new free: val[0], attributes: val[2], expression: val[3]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_192(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_193(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_194(val, _values)
          ImplementationDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: [], body: val[8]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_195(val, _values)
     Program.new declarations: val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class BoogieLanguage


