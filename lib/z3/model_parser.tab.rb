# typed: true
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'model_parser.rex'
module Z3

class ModelParser < Racc::Parser

module_eval(<<'...end model_parser.racc/module_eval...', 'model_parser.racc', 37)
def parse(input)
  scan_str(input)
end

...end model_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    14,    15,    13,    14,    15,    17,    12,    21,    20,
    12,    13,    14,    15,    13,    14,    15,     8,    12,    22,
    23,    12,    13,    14,    15,     7,    25,     4,    17,    12,
    13,    14,    15,     5,    11,    28,     4,    12 ]

racc_action_check = [
    27,    27,    27,    23,    23,    23,    27,    27,    16,    12,
    23,    22,    22,    22,    19,    19,    19,     5,    22,    17,
    18,    19,    11,    11,    11,     4,    20,     3,    11,    11,
     7,     7,     7,     1,     7,    25,     0,     7 ]

racc_action_pointer = [
    32,    33,   nil,    23,    20,    17,   nil,    28,   nil,   nil,
   nil,    20,    -1,   nil,   nil,   nil,     1,    14,    15,    12,
    24,   nil,     9,     1,   nil,    24,   nil,    -2,   nil,   nil ]

racc_action_default = [
    -2,   -15,    -1,    -2,   -15,   -15,    -3,   -15,    30,    -4,
    -5,   -15,   -15,   -12,   -13,   -14,   -15,   -15,   -15,    -9,
   -15,    -6,   -15,   -15,   -10,   -15,    -7,   -15,   -11,    -8 ]

racc_goto_table = [
    10,    16,     2,     1,     9,     6,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,    27,    29 ]

racc_goto_check = [
     5,     6,     2,     1,     4,     2,     7,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,     5,     6 ]

racc_goto_pointer = [
   nil,     3,     2,   nil,    -3,    -7,   -10,   -13 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,    19,   nil,    18 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  0, 14, :_reduce_2,
  2, 14, :_reduce_3,
  3, 15, :_reduce_4,
  1, 16, :_reduce_none,
  3, 16, :_reduce_6,
  3, 18, :_reduce_7,
  4, 18, :_reduce_8,
  1, 19, :_reduce_9,
  2, 19, :_reduce_10,
  4, 17, :_reduce_11,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none ]

racc_reduce_n = 15

racc_shift_n = 30

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :BOOLEAN => 3,
  :SYMBOL => 4,
  "->" => 5,
  "{" => 6,
  "}" => 7,
  "else" => 8,
  "(" => 9,
  "-" => 10,
  ")" => 11 }

racc_nt_base = 12

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "BOOLEAN",
  "SYMBOL",
  "\"->\"",
  "\"{\"",
  "\"}\"",
  "\"else\"",
  "\"(\"",
  "\"-\"",
  "\")\"",
  "$start",
  "target",
  "model",
  "definition",
  "rhs",
  "value",
  "fmappings",
  "values" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'model_parser.racc', 10)
  def _reduce_2(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 11)
  def _reduce_3(val, _values)
     val[0].merge val[1] 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 14)
  def _reduce_4(val, _values)
     {val[0] => val[2]} 
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'model_parser.racc', 16)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 19)
  def _reduce_7(val, _values)
     {nil => val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 20)
  def _reduce_8(val, _values)
     {val[0] => val[2]}.merge(val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 23)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 24)
  def _reduce_10(val, _values)
     vs = val[1]; [val[0]] + (vs.is_a?(Array) ? vs : [vs]) 
  end
.,.,

module_eval(<<'.,.,', 'model_parser.racc', 27)
  def _reduce_11(val, _values)
     -val[2] 
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class ModelParser

end
